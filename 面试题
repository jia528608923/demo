#### 回答面试题格式

	1.我对这个题是这么理解的
	2.根据自己的逻辑 ，阐述当前面试题的内容
		a) 是什么？
		b）为什么？
		c) 怎么做？
		d）案例？	
	3.总结
    要求每个面试题都按照这个套路去整理成笔记保存在有道云内，要求回答时间不低于3分钟






#### 1.解释vuex原理
	
	State、 Getters、Mutations 、Actions、 Modules
	vuex作为vue官方出品的状态管理框架，以及其简单API设计、便捷的开发工具
	vuex其实是集中的数据管理仓库，相当于数据库mongoDB，MySQL等，任何组件都可以存取仓库中的数据。
	每一个 Vuex 应用的核心就是 store（仓库）
	1）多个视图依赖于同一状态。
	2）来自不同视图的行为需要变更同一状态。
	3）vuex 类似Redux  的状态管理器, 用来管理Vue的所有组件状态
	4）采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。

	State:
	Vuex就是一个仓库，仓库里面放了很多对象。其中state就是数据源存放地，对应与一般Vue对象里面的data
	state里面存放的数据是响应式的，Vue组件从store中读取数据，若是store中的数据发生改变，依赖这个数据的组件也会发生更新
	它通过mapState把全局的 state 和 getters 映射到当前组件的 computed 计算属性中

	Getters:
	getters 可以对State进行计算操作，它就是Store的计算属性
	虽然在组件内也可以做计算属性，但是getters 可以在多组件之间复用
	如果一个状态只在一个组件内使用，是可以不用getters

	Mutations:
	Action 类似于 mutation，不同在于：
	Action 提交的是 mutation，而不是直接变更状态。
	Action 可以包含任意异步操作
	
	actions => 像一个装饰器，包裹mutations，使之可以异步。 
    modules => 模块化Vuex

	Vue.js中ajax请求代码应该写在组件的methods中还是vuex的actions中？
	答：
	一、如果请求来的数据是不是要被其他组件公用，仅仅在请求的组件内使用，就不需要放入vuex 的state里。
	二、如果被其他地方复用，这个很大几率上是需要的，如果需要，请将请求放入action里，方便复用，并包装成promise返回，在调用处用async await处理返回的数据。如果不要复用这个请求，那么直接写在vue文件里很方便。


	不用Vuex会带来什么问题？
	答：
	一、可维护性会下降，你要想修改数据，你得维护三个地方
	二、可读性会下降，因为一个组件里的数据，你根本就看不出来是从哪来的
	三、增加耦合，大量的上传派发，会让耦合性大大的增加，本来Vue用Component就是为了减少耦合，现在这么用，和组件化的初衷相背。



#### 2.webpack打包原理


	webpack是一个现代Javascript应用的打包工具。它采用tool+plugins的结构。tool提供基础能力，即文件依赖管理和资源加载管理；在此基础上通过一系列的plugins来丰富打包工具的功能。
	在webpack里，所有的文件都是模块。但是webpack只认识js模块，所以要通过一些loader插件把css、图片等文件转化成webpack认识的模块。
	在webpack打包的文件中，模块是以模块函数来表示的。通过把文件转化成模块函数就可以控制模块的运行时间。即加载完成后不会立即执行，等到调用模块函数的时候才会执行。
	
	webpack的工作步骤如下：

		从入口文件开始递归地建立一个依赖关系图。
		把所有文件都转化成模块函数。
		根据依赖关系，按照配置文件把模块函数分组打包成若干个bundle。
		通过script标签把打包的bundle注入到html中，通过manifest文件来管理bundle文件的运行和加载。
	打包的规则为：一个入口文件对应一个bundle。该bundle包括入口文件模块和其依赖的模块。按需加载的模块或需单独加载的模块则分开打包成其他的bundle。
	除了这些bundle外，还有一个特别重要的bundle，就是manifest.bundle.js文件，即webpackBootstrap。这个manifest文件是最先加载的，负责解析webpack打包的其他bundle文件，使其按要求进行加载和执行。


	打包代码解析
	首先分析一下manifest文件。
	它包含三个主要变量，modules、installedModules和installedChunks。
		包括三个主要函数webpackJsonpCallback，webpack_require和webpack_require.e
	然后分析普通的bundle文件


#### 3.JS中的作用域和作用域链是什么？
	作用域：
	每个JavaScript函数都是一个特殊的对象，对象中有的属性我们可以访问，但有的不可以，这些属性仅供JavaScript引擎存取，
[[scope]]就是其中一个，[[scope]]就指的是作用域，其中存储了运行期上下文的集合。
		
	局部作用域： 
	和全局作用域相反，局部作用域一般只在固定的代码片段内可访问到，而对于函数外部是无法访问的，最常见的例如函数内部
	需要注意的是，函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量！

	

	作用域链：
	每个函数执行的时候都有自己的执行环境。当代码在一个环境中执行的时候，会创建对象的一个作用域链（scope chain），
也就是[[scope]]中所存储的执行期上下文对象的链式集合链接。
	根据在内部函数可以访问外部函数变量的这种机制，用链式查找决定哪些数据能被内部函数访问。 

	执行环境（execution context）
	每个函数运行时都会产生一个执行环境，而这个执行环境怎么表示呢？js为每一个执行环境关联了一个变量对象。环境中定义的
所有变量和函数都保存在这个对象中。 
	全局执行环境是最外围的执行环境，全局执行环境被认为是window对象，因此所有的全局变量和函数都作为window对象的属性
和方法创建的。 
	js的执行顺序是根据函数的调用来决定的，当一个函数被调用时，该函数环境的变量对象就被压入一个环境栈中。而在函数执行
之后，栈将该函数的变量对象弹出，把控制权交给之前的执行环境变量对象。 



#### 4.Vue的生命周期
beforeCreate（创建前） 在数据观测和初始化事件还未开始

created（创建后） 完成数据观测，属性和方法的运算，初始化事件，$el属性还没有显示出来

beforeMount（载入前） 在挂载开始之前被调用，相关的render函数首次被调用。实例已完成以下的配置：编译模板，把data里面的数据和
模板生成html。注意此时还没有挂载html到页面上。

mounted（载入后） 在el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用。实例已完成以下的配置：用上面编译好的html内容
替换el属性指向的DOM对象。完成模板中的html渲染到html页面中。此过程中进行ajax交互。

beforeUpdate（更新前） 在数据更新之前调用，发生在虚拟DOM重新渲染和打补丁之前。可以在该钩子中进一步地更改状态，
不会触发附加的重渲染过程。

updated（更新后） 在由于数据更改导致的虚拟DOM重新渲染和打补丁之后调用。调用时，组件DOM已经更新，所以可以执行依赖于
DOM的操作。然而在大多数情况下，应该避免在此期间更改状态，因为这可能会导致更新无限循环。该钩子在服务器端渲染期间不被调用。

beforeDestroy（销毁前） 在实例销毁之前调用。实例仍然完全可用。

destroyed（销毁后） 在实例销毁之后调用。调用后，所有的事件监听器会被移除，所有的子实例也会被销毁。该钩子在服务器端渲染期间
不被调用。


#### 5.computed、watch、methods的区别
computed计算属性是用来声明式的描述一个值依赖了其它的值。当你在模板里把数据绑定到一个计算属性上时，Vue 会在其依赖
的任何值导致该计算属性改变时更新 DOM。这个功能非常强大，它可以让你的代码更加声明式、数据驱动并且易于维护。

watch监听的是你定义的变量,当你定义的变量的值发生变化时，调用对应的方法。就好在div写一个表达式name，data里
写入num和lastname,firstname,在watch里当num的值发生变化时，就会调用num的方法，方法里面的形参对应的是num的新值和旧值，
而计算属性computed,计算的是Name依赖的值,它不能计算在data中已经定义过的变量。

methods方法，函数，绑定事件调用；不会使用缓存


#### 6.Vue的路由实现：hash模式 和 history模式
hash模式：在浏览器中符号“#”，#以及#后面的字符称之为hash，用window.location.hash读取；
特点：hash虽然在URL中，但不被包括在HTTP请求中；用来指导浏览器动作，对服务端安全无用，hash不会重加载页面。
hash 模式下，仅 hash 符号之前的内容会被包含在请求中，如?http://www.xxx.com，因此对于后端来说，即使没有做到对路由的全覆盖，
也不会返回 404 错误。

history模式：history采用HTML5的新特性；且提供了两个新方法：pushState（），replaceState（）可以对浏览器历史记录栈进行修改，
以及popState事件的监听到状态变更。
history 模式下，前端的 URL 必须和实际向后端发起请求的 URL 一致。后端如果缺少对 /items/id 的
路由处理，将返回 404 错误。Vue-Router 官网里如此描述：“不过这种模式要玩好，还需要后台配置支持……所以呢，你要在服务端增加
一个覆盖所有情况的候选资源：如果 URL 匹配不到任何静态资源，则应该返回同一个 index.html 页面，这个页面就是你 app 依赖的页面。”


#### 7.位运算符
    &	AND	如果两位都是 1 则设置每位为 1
    |	OR	如果两位之一为 1 则设置每位为 1
    ^	XOR	如果两位只有一位为 1 则设置每位为 1
    ~	NOT	反转所有位
    <<	零填充左位移	通过从右推入零向左位移，并使最左边的位脱落。
    >>	有符号右位移	通过从左推入最左位的拷贝来向右位移，并使最右边的位脱落。
    >>>	零填充右位移	通过从左推入零来向右位移，并使最右边的位脱落。

    JavaScript 将数字存储为 64 位浮点数，但所有按位运算都以 32 位二进制数执行。
    
    在执行位运算之前，JavaScript 将数字转换为 32 位有符号整数。
    
    执行按位操作后，结果将转换回 64 位 JavaScript 数

#### 8.什么是 React
    React是一个简单的javascript UI库，用于构建高效、快速的用户界面。
    它是一个轻量级库，因此很受欢迎。它遵循组件设计模式、
    声明式编程范式和函数式编程概念，以使前端应用程序更高效。
    它使用虚拟DOM来有效地操作DOM。
    它遵循从高阶组件到低阶组件的单向数据流。
    
    
#### 9.React 与 Angular 有何不同？
    Angular是一个成熟的MVC框架，带有很多特定的特性，
    比如服务、指令、模板、模块、解析器等等。
    React是一个非常轻量级的库，它只关注MVC的视图部分。
    Angular遵循两个方向的数据流，而React遵循从上到下的单向数据流。
    React在开发特性时给了开发人员很大的自由，
    例如，调用API的方式、路由等等。
    我们不需要包括路由器库，除非我们需要它在我们的项目。
    
#### 10.组件生命周期方法
    componentWillMount()
    在渲染前调用,在客户端也在服务端，它只发生一次。
    
    componentDidMount()
    在第一次渲染后调用，只在客户端。之后组件已经生成了对应的DOM结构，可以通过this.getDOMNode()来进行访问。 如果你想和其他JavaScript框架一起使用，可以在这个方法中调用setTimeout, setInterval或者发送AJAX请求等操作(防止异部操作
    阻塞UI)。
    
    componentWillReceiveProps()
    在组件接收到一个新的 prop (更新后)时被调用。这个方法在初始化render时不会被调用。
    
    shouldComponentUpdate()
    返回一个布尔值。在组件接收到新的props或者state时被调用。在初始化时或者使用forceUpdate时不被调用。 可以在你确认不需要更新组件时使用。
    
    componentWillUpdate()
    在组件接收到新的props或者state但还没有render时被调用。在初始化时不会被调用
    
    componentDidUpdate()
    在组件完成更新后立即调用。在初始化时不会被调用
    
    componentWillUnMount()
    组件从 DOM 中移除的时候立刻被调用。
    
    getDerivedStateFromError()
    这个生命周期方法在ErrorBoundary类中使用。实际上，如果使用这个生命周期方法，任何类都会变成ErrorBoundary。这用于在组件树中出现错误时呈现回退UI，而不是在屏幕上显示一些奇怪的错误。
    
    componentDidCatch()
    这个生命周期方法在ErrorBoundary类中使用。实际上，如果使用这个生命周期方法，任何类都会变成ErrorBoundary。这用于在组件树中出现错误时记录错误。
    
#### 11.什么是Redux及其工作原理
    Redux 是 React的一个状态管理库，它基于flux。 Redux简化了React中的单向数据流。 Redux将状态管理完全从React中抽象出来。
    
##### ①.它是如何工作的？
    
    在React中，组件连接到 redux ，如果要访问 redux，需要派出一个包含 id和负载(payload) 的 action。action 中的 payload 是可选的，action 将其转发给 Reducer。
    当reducer收到action时，通过 swithc...case 语法比较 action 中type。 匹配时，更新对应的内容返回新的 state。
    当Redux状态更改时，连接到Redux的组件将接收新的状态作为props。当组件接收到这些props时，它将进入更新阶段并重新渲染 UI。
    
##### ②.Redux 循环细节
    Action: Action 只是一个简单的json对象，type 和有payload作为键。type 是必须要有的，payload是可选的。
    
    Action Creators：这些是创建Actions的函数，因此我们在派发action时不必在组件中手动编写每个 action
    
    Reducers：Reducers 是纯函数，它将 action和当前 state 作为参数,计算必要的逻辑并返回一个新的state。 这些 Reducers 没有任何副作用。 它不会改变 state 而是总是返回 state 。
    
#### 12.组件如何与 redux 进行连接
    mapStateToProps：此函数将state映射到 props 上，因此只要state发生变化，新 state 会重新映射到 props。 这是订阅store的方式。
    mapDispatchToProps：此函数用于将 action creators 绑定到你的props 。以便我们可以在第12行中使用This . props.actions.sendemail()来派发一个动作。
    connect和bindActionCreators来自 redux。 前者用于连接 store ，后者用于将 action creators 绑定到你的 props
    
#### 13.什么是 React Router Dom 及其工作原理
    react-router-dom是应用程序中路由的库。 React库中没有路由功能，需要单独安装react-router-dom。
    react-router-dom 提供两个路由器BrowserRouter和HashRoauter。前者  基于url的pathname段，后者基于hash段。
    
##### react-router-dom 组件
    BrowserRouter 和 HashRouter 是路由器。
    Route 用于路由匹配。
    Link 组件用于在应用程序中创建链接。 它将在HTML中渲染为锚标记。
    NavLink是突出显示当前活动链接的特殊链接。
    Switch 不是必需的，但在组合路由时很有用。
    Redirect 用于强制路由重定向

#### 14.如何在重新加载页面时保留数据
    单页应用程序首先在DOM中加载index.html，然后在用户浏览页面时加载内容，或者从同一index.html中的后端API获取任何数据。
    如果通过点击浏览器中的重新加载按钮重新加载页面index.html，整个React应用程序将重新加载，我们将丢失应用程序的状态。 如何保留应用状态？
    每当重新加载应用程序时，我们使用浏览器localstorage来保存应用程序的状态。我们将整个存储数据保存在localstorage中，每当有页面刷新或重新加载时，我们从localstorage加载状态。
    
#### 15.如何在React进行API调用
    我们使用redux-thunk在React中调用API。因为reduce是纯函数，所以没有副作用，比如调用API。
    因此，我们必须使用redux-thunk从 action creators 那里进行 API 调用。Action creator 派发一个action，将来自API的数据放入action 的 payload 中。Reducers 接收我们在上面的redux循环中讨论的数据，其余的过程也是相同的。

    redux-thunk是一个中间件。一旦它被引入到项目中，每次派发一个action时，都会通过thunk传递。如果它是一个函数，它只是等待函数处理并返回响应。如果它不是一个函数，它只是正常处理。


#### 16.react 中的引用如何生效？
    在标签上写ref属性 
        属性就是一个 函数  （）=>{} 
        函数的参数就是当前的标签 （（tag）=》{ this.xx=tag }   this.xx=tag 意思就是说把tag这个标签 赋值给 一个this中的xx属性 ）
    以后在react的业务逻辑中 this.xx获取到被引用的标签 


    
    






